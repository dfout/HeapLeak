"""empty message

Revision ID: 168ad77487e3
Revises:
Create Date: 2024-07-01 13:00:52.733804

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")

# revision identifiers, used by Alembic.
revision = '168ad77487e3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=40), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")
    op.create_table('questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('body', sa.String(length=2000), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE questions SET SCHEMA {SCHEMA};")

    op.create_table('answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('body', sa.String(length=2000), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE answers SET SCHEMA {SCHEMA};")

    op.create_table('saves',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE saves SET SCHEMA {SCHEMA};")

    op.create_table('topics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('tag', sa.Enum('python', 'javascript', 'java', 'csharp', 'cpp', 'php', 'ruby', 'swift', 'go', 'rust', 'kotlin', 'typescript', 'html', 'css', 'sql', 'r', 'matlab', 'bash', 'perl', 'html5', 'css3', 'react', 'angular', 'vuejs', 'svelte', 'nodejs', 'django', 'flask', 'rubyonrails', 'aspnet', 'laravel', 'expressjs', 'graphql', 'restful_apis', 'bootstrap', 'tailwind_css', 'android', 'ios', 'react_native', 'flutter', 'xamarin', 'swiftui', 'kotlin_multiplatform', 'mysql', 'postgresql', 'mongodb', 'sqlite', 'redis', 'oracle', 'sql_server', 'firebase', 'dynamodb', 'aws', 'azure', 'google_cloud', 'docker', 'kubernetes', 'jenkins', 'ansible', 'terraform', 'ci_cd', 'gitlab', 'github_actions', 'git', 'github', 'bitbucket', 'vscode', 'intellij_idea', 'pycharm', 'sublime_text', 'eclipse', 'netbeans', 'agile', 'scrum', 'kanban', 'unit_testing', 'integration_testing', 'tdd', 'bdd', 'continuous_integration', 'continuous_deployment', 'algorithms', 'data_structures', 'machine_learning', 'deep_learning', 'artificial_intelligence', 'data_science', 'big_data', 'cybersecurity', 'blockchain', 'internet_of_things', 'game_development', 'virtual_reality', 'augmented_reality', 'robotics', 'api_design', 'software_architecture', 'microservices', 'performance_optimization', 'code_review', 'pair_programming', name='tags'), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    if environment == "production":
        op.execute(f"ALTER TABLE topics SET SCHEMA {SCHEMA};")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('topics')
    op.drop_table('saves')
    op.drop_table('answers')
    op.drop_table('questions')
    op.drop_table('users')
    # ### end Alembic commands ###
