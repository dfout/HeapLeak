from .db import db, environment, SCHEMA, add_prefix_for_prod
from enum import Enum

class Tags(Enum):
    python = "Python"
    javascript = "JavaScript"
    java = "Java"
    csharp = "C#"
    cpp = "C++"
    php = "PHP"
    ruby = "Ruby"
    swift = "Swift"
    go = "Go"
    rust = "Rust"
    kotlin = "Kotlin"
    typescript = "TypeScript"
    html = "HTML"
    css = "CSS"
    sql = "SQL"
    r = "R"
    matlab = "MATLAB"
    bash = "Bash"
    perl = "Perl"
    html5 = "HTML5"
    css3 = "CSS3"
    react = "React"
    angular = "Angular"
    vuejs = "Vue.js"
    svelte = "Svelte"
    nodejs = "Node.js"
    django = "Django"
    flask = "Flask"
    rubyonrails = "Ruby on Rails"
    aspnet = "ASP.NET"
    laravel = "Laravel"
    expressjs = "Express.js"
    graphql = "GraphQL"
    restful_apis = "RESTful APIs"
    bootstrap = "Bootstrap"
    tailwind_css = "Tailwind CSS"
    android = "Android"
    ios = "iOS"
    react_native = "React Native"
    flutter = "Flutter"
    xamarin = "Xamarin"
    swiftui = "SwiftUI"
    kotlin_multiplatform = "Kotlin Multiplatform"
    mysql = "MySQL"
    postgresql = "PostgreSQL"
    mongodb = "MongoDB"
    sqlite = "SQLite"
    redis = "Redis"
    oracle = "Oracle"
    sql_server = "SQL Server"
    firebase = "Firebase"
    dynamodb = "DynamoDB"
    aws = "AWS"
    azure = "Azure"
    google_cloud = "Google Cloud"
    docker = "Docker"
    kubernetes = "Kubernetes"
    jenkins = "Jenkins"
    ansible = "Ansible"
    terraform = "Terraform"
    ci_cd = "CI/CD"
    gitlab = "GitLab"
    github_actions = "GitHub Actions"
    git = "Git"
    github = "GitHub"
    bitbucket = "Bitbucket"
    vscode = "VSCode"
    intellij_idea = "IntelliJ IDEA"
    pycharm = "PyCharm"
    sublime_text = "Sublime Text"
    eclipse = "Eclipse"
    netbeans = "NetBeans"
    agile = "Agile"
    scrum = "Scrum"
    kanban = "Kanban"
    unit_testing = "Unit Testing"
    integration_testing = "Integration Testing"
    tdd = "TDD (Test-Driven Development)"
    bdd = "BDD (Behavior-Driven Development)"
    continuous_integration = "Continuous Integration"
    continuous_deployment = "Continuous Deployment"
    algorithms = "Algorithms"
    data_structures = "Data Structures"
    machine_learning = "Machine Learning"
    deep_learning = "Deep Learning"
    artificial_intelligence = "Artificial Intelligence"
    data_science = "Data Science"
    big_data = "Big Data"
    cybersecurity = "Cybersecurity"
    blockchain = "Blockchain"
    internet_of_things = "Internet of Things (IoT)"
    game_development = "Game Development"
    virtual_reality = "Virtual Reality"
    augmented_reality = "Augmented Reality"
    robotics = "Robotics"
    api_design = "API Design"
    software_architecture = "Software Architecture"
    microservices = "Microservices"
    performance_optimization = "Performance Optimization"
    code_review = "Code Review"
    pair_programming = "Pair Programming"

class Topic(db.Model):
    __tablename__ = 'topics'

    if environment == "production":
        __table_args__ = {'schema': SCHEMA}

    id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.Integer, db.ForeignKey(add_prefix_for_prod('questions.id')), nullable=False)
    tag = db.Column(db.Enum(Tags), nullable=False)


    def to_dict(self):
        return {
            'id':self.id,
            'tag':self.tag.value,
            'post_id':self.question_id
        }
